// Generated by gencpp from file detection/bbox.msg
// DO NOT EDIT!


#ifndef DETECTION_MESSAGE_BBOX_H
#define DETECTION_MESSAGE_BBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace detection
{
template <class ContainerAllocator>
struct bbox_
{
  typedef bbox_<ContainerAllocator> Type;

  bbox_()
    : header()
    , x_coord()
    , y_coord()
    , x_extent()
    , y_extent()
    , distance()
    , num(0)  {
    }
  bbox_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x_coord(_alloc)
    , y_coord(_alloc)
    , x_extent(_alloc)
    , y_extent(_alloc)
    , distance(_alloc)
    , num(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _x_coord_type;
  _x_coord_type x_coord;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _y_coord_type;
  _y_coord_type y_coord;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _x_extent_type;
  _x_extent_type x_extent;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _y_extent_type;
  _y_extent_type y_extent;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _distance_type;
  _distance_type distance;

   typedef int32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::detection::bbox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection::bbox_<ContainerAllocator> const> ConstPtr;

}; // struct bbox_

typedef ::detection::bbox_<std::allocator<void> > bbox;

typedef boost::shared_ptr< ::detection::bbox > bboxPtr;
typedef boost::shared_ptr< ::detection::bbox const> bboxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection::bbox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection::bbox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection::bbox_<ContainerAllocator1> & lhs, const ::detection::bbox_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x_coord == rhs.x_coord &&
    lhs.y_coord == rhs.y_coord &&
    lhs.x_extent == rhs.x_extent &&
    lhs.y_extent == rhs.y_extent &&
    lhs.distance == rhs.distance &&
    lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection::bbox_<ContainerAllocator1> & lhs, const ::detection::bbox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detection::bbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection::bbox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection::bbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection::bbox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection::bbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection::bbox_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21b40598f11f486566b15cdf70feebe3";
  }

  static const char* value(const ::detection::bbox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21b40598f11f4865ULL;
  static const uint64_t static_value2 = 0x66b15cdf70feebe3ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection/bbox";
  }

  static const char* value(const ::detection::bbox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32[] x_coord\n"
"int32[] y_coord\n"
"int32[] x_extent\n"
"int32[] y_extent\n"
"float32[] distance\n"
"int32 num\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::detection::bbox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection::bbox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x_coord);
      stream.next(m.y_coord);
      stream.next(m.x_extent);
      stream.next(m.y_extent);
      stream.next(m.distance);
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bbox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection::bbox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection::bbox_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x_coord[]" << std::endl;
    for (size_t i = 0; i < v.x_coord.size(); ++i)
    {
      s << indent << "  x_coord[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.x_coord[i]);
    }
    s << indent << "y_coord[]" << std::endl;
    for (size_t i = 0; i < v.y_coord.size(); ++i)
    {
      s << indent << "  y_coord[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.y_coord[i]);
    }
    s << indent << "x_extent[]" << std::endl;
    for (size_t i = 0; i < v.x_extent.size(); ++i)
    {
      s << indent << "  x_extent[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.x_extent[i]);
    }
    s << indent << "y_extent[]" << std::endl;
    for (size_t i = 0; i < v.y_extent.size(); ++i)
    {
      s << indent << "  y_extent[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.y_extent[i]);
    }
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_MESSAGE_BBOX_H
